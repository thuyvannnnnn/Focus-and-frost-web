<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Trang-chủ - Ứng dụng tập trung</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
  />
  <link
    href="https://fonts.googleapis.com/css2?family=Roboto&display=swap"
    rel="stylesheet"
  />
  <style>
    body {
      font-family: 'Roboto', sans-serif;
      background-color: #f0f3e8;
    }
    /* Scrollbar for menu */
    .scrollbar-thin::-webkit-scrollbar {
      width: 6px;
      height: 6px;
    }
    .scrollbar-thin::-webkit-scrollbar-track {
      background: transparent;
    }
    .scrollbar-thin::-webkit-scrollbar-thumb {
      background-color: #9bba74;
      border-radius: 3px;
    }
  </style>
</head>
<body class="relative min-h-screen flex flex-col items-center bg-[#f0f3e8]">
  <!-- Background Image -->
  <img
    src="https://i.ibb.co/JRr5YSFS/66-F84-D93-7422-4-D12-AD64-8-B3103-E20-BD3.png"
    alt="Background with soft green and beige abstract shapes, watercolor style, gentle and calming atmosphere"
    class="fixed inset-0 w-full h-full object-cover -z-10"
  />

  <!-- Header with Google Login Button -->
  <header class="w-full flex justify-end p-4 max-w-screen-md">
    <button id="googleLoginBtn" class="flex items-center space-x-2 px-4 py-2 rounded bg-[#9BBA74] hover:bg-[#8aa85a] text-white font-semibold shadow focus:outline-none focus:ring-2 focus:ring-[#8aa85a]">
      <i class="fab fa-google"></i>
      <span id="loginText">Đăng nhập</span>
    </button>
  </header>

  <!-- Main Content -->
  <main
    class="flex-grow flex flex-col items-center justify-center px-4 pb-20 relative w-full max-w-screen-md"
    aria-label="Màn hình chính ứng dụng tập trung"
  >
    <!-- Time selector rectangle above circle with progress bar -->
    <div
      id="time-selector"
      class="mb-6 w-full max-w-xs rounded-lg border-4 border-[#9BBA74] bg-white bg-opacity-90 p-4 flex flex-col select-none"
      aria-label="Chọn thời gian giờ phút giây"
    >
      <div class="relative w-full h-10 rounded bg-gray-200 overflow-hidden mb-2" aria-hidden="true">
        <div id="time-progress-bar" class="absolute left-0 top-0 h-10 bg-[#9BBA74] transition-all duration-500 ease-linear" style="width: 100%;"></div>
      </div>
      <div class="flex justify-center space-x-2 z-10 relative">
        <input
          type="number"
          id="input-hour"
          min="0"
          max="23"
          placeholder="Giờ"
          class="w-16 text-center rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-[#9BBA74] text-lg font-semibold bg-transparent"
          aria-label="Giờ"
        />
        <span class="text-xl font-semibold text-gray-700 select-none">:</span>
        <input
          type="number"
          id="input-minute"
          min="0"
          max="59"
          placeholder="Phút"
          class="w-16 text-center rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-[#9BBA74] text-lg font-semibold bg-transparent"
          aria-label="Phút"
        />
        <span class="text-xl font-semibold text-gray-700 select-none">:</span>
        <input
          type="number"
          id="input-second"
          min="0"
          max="59"
          placeholder="Giây"
          class="w-16 text-center rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-[#9BBA74] text-lg font-semibold bg-transparent"
          aria-label="Giây"
        />
      </div>
    </div>

    <!-- Circle with selected cake image -->
    <button
      id="circle-cake"
      aria-label="Chọn món ăn"
      class="relative rounded-full border-8 border-[#9BBA74] w-56 h-56 flex items-center justify-center overflow-hidden shadow-lg bg-white"
      type="button"
    >
      <img
        id="cake-image"
        src="https://i.ibb.co/4nK5Z7L0/1-C4-A3268-5-EA5-49-C2-83-E5-318-CC48-C1619.png"
        alt="Hình ảnh Macaron màu hồng pastel, bánh ngọt tròn nhỏ xinh xắn, nền trắng"
        class="w-40 h-40 object-contain"
        draggable="false"
      />
      <!-- GIF overlay hidden by default -->
      <img
        id="cooking-gif"
        src="https://i.ibb.co/S4dcjq9g/Video.gif"
        alt="Hình ảnh GIF hoạt hình bánh đang được nấu, màu sắc tươi sáng, nền trong suốt"
        class="absolute inset-0 w-full h-full object-contain hidden"
        draggable="false"
      />
    </button>

    <!-- Selected cake name rectangle below circle -->
    <div
      id="selected-cake-name"
      class="mt-6 w-full max-w-xs rounded-lg border-4 border-[#9BBA74] bg-white bg-opacity-90 p-3 text-center text-xl font-semibold text-gray-800 select-none min-h-[3rem]"
      aria-live="polite"
      aria-atomic="true"
    >
      Macaron
    </div>

    <!-- Bottom rectangle with buttons -->
    <div
      class="mt-6 w-full max-w-xs rounded-lg border-4 border-[#9BBA74] bg-white bg-opacity-90 p-4 flex items-center justify-between"
      aria-label="Các nút điều khiển"
    >
      <!-- Left side buttons -->
      <div class="flex space-x-4">
        <button
          id="btn-decoration"
          aria-label="Trang trí bánh"
          class="w-12 h-12 rounded-full bg-[#9BBA74] hover:bg-[#8aa85a] flex items-center justify-center text-white shadow focus:outline-none focus:ring-2 focus:ring-[#8aa85a]"
          type="button"
        >
          <i class="fas fa-paint-brush text-lg"></i>
        </button>
        <button
          id="btn-statistics"
          aria-label="Bảng thống kê dạng cột"
          class="w-12 h-12 rounded-full bg-[#9BBA74] hover:bg-[#8aa85a] flex items-center justify-center text-white shadow focus:outline-none focus:ring-2 focus:ring-[#8aa85a]"
          type="button"
        >
          <i class="fas fa-chart-bar text-lg"></i>
        </button>
      </div>

      <!-- Center Start/Stop/Use Reward button -->
      <button
        id="btn-start-stop"
        class="flex-1 mx-4 py-2 rounded-lg font-bold text-white disabled:opacity-50 disabled:cursor-not-allowed bg-[#9BBA74] hover:bg-[#8aa85a] focus:outline-none focus:ring-2 focus:ring-[#8aa85a]"
        type="button"
        aria-live="polite"
        aria-atomic="true"
      >
        Bắt đầu
      </button>

      <!-- Right side buttons -->
      <div class="flex space-x-4">
        <button
          id="btn-tasks"
          aria-label="Nhiệm vụ"
          class="w-12 h-12 rounded-full bg-[#9BBA74] hover:bg-[#8aa85a] flex items-center justify-center text-white shadow focus:outline-none focus:ring-2 focus:ring-[#8aa85a]"
          type="button"
        >
          <i class="fas fa-tasks text-lg"></i>
        </button>
      </div>
    </div>

    <!-- Clear Data Button -->
    <div class="mt-6 w-full max-w-xs flex justify-center">
      <button
        id="btn-clear-data"
        class="px-6 py-2 rounded bg-red-600 hover:bg-red-700 text-white font-semibold focus:outline-none focus:ring-2 focus:ring-red-700"
        type="button"
        aria-label="Xóa dữ liệu tập trung"
      >
        Xóa dữ liệu tập trung
      </button>
    </div>

    <!-- Hidden feedback form for submission -->
    <form
      id="feedback-form"
      action="https://formspree.io/f/mzzvylbg"
      method="POST"
      class="hidden"
    >
      <label>
        <input type="email" name="thuyvan01012008@gmail.com" value="madebyvann" />
      </label>
      <input type="hidden" name="message" id="feedback-message" />
    </form>
  </main>

  <!-- Feedback button bottom right -->
  <button
    id="btn-feedback"
    aria-label="Góp ý"
    class="fixed bottom-6 right-6 w-14 h-14 rounded-full bg-[#9BBA74] hover:bg-[#8aa85a] flex items-center justify-center text-white shadow-lg z-50 focus:outline-none focus:ring-2 focus:ring-[#8aa85a]"
    type="button"
    title="Góp ý"
  >
    <i class="fas fa-comment-alt text-xl"></i>
  </button>

  <!-- Menu chọn món (hidden by default) -->
  <div
    id="menu-select-cake"
    class="fixed bottom-32 left-1/2 transform -translate-x-1/2 w-full max-w-md max-h-60 bg-white bg-opacity-95 rounded-lg border border-gray-300 shadow-lg overflow-y-auto scrollbar-thin hidden z-40"
    role="list"
    aria-label="Menu chọn món ăn"
  >
    <div id="menu-cake-list" class="grid grid-cols-3 gap-4 p-4">
      <button type="button" class="flex flex-col items-center space-y-1 focus:outline-none focus:ring-2 focus:ring-[#9BBA74] rounded" data-cake="Macaron" aria-label="Chọn món Macaron">
        <img src="https://i.ibb.co/4nK5Z7L0/1-C4-A3268-5-EA5-49-C2-83-E5-318-CC48-C1619.png" alt="Hình ảnh Macaron màu hồng pastel, bánh ngọt tròn nhỏ xinh xắn, nền trắng" class="w-20 h-20 object-contain" draggable="false" />
        <span class="text-sm font-semibold text-gray-700">Macaron</span>
      </button>
      <button type="button" class="flex flex-col items-center space-y-1 focus:outline-none focus:ring-2 focus:ring-[#9BBA74] rounded" data-cake="Cà tím" aria-label="Chọn món Cà tím">
        <img src="https://i.ibb.co/nN5GQxNr/IMG-7291.png" alt="Hình ảnh quả cà tím tím tươi, bóng mượt, nền trắng" class="w-20 h-20 object-contain" draggable="false" />
        <span class="text-sm font-semibold text-gray-700">Cà tím</span>
      </button>
    </div>
  </div>

  <!-- Reward modal -->
  <div
    id="reward-modal"
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 hidden"
    role="dialog"
    aria-modal="true"
    aria-labelledby="reward-title"
  >
    <div
      class="bg-white rounded-lg max-w-md w-full p-6 flex flex-col space-y-4 shadow-lg"
    >
      <h2
        id="reward-title"
        class="text-xl font-semibold text-gray-800 text-center"
      >
        Hoan hô! Bạn đã nhận được
      </h2>
      <div
        id="reward-content"
        class="flex flex-col items-center space-y-4"
        aria-live="polite"
        aria-atomic="true"
      >
      </div>
      <button
        id="reward-confirm"
        class="mt-4 px-6 py-2 rounded bg-[#DC143C] hover:bg-[#b0102a] text-white font-semibold mx-auto focus:outline-none focus:ring-2 focus:ring-[#b0102a]"
        type="button"
      >
        Xác nhận
      </button>
    </div>
  </div>

  <!-- Statistics modal -->
  <div
    id="statistics-modal"
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 hidden"
    role="dialog"
    aria-modal="true"
    aria-labelledby="statistics-title"
  >
    <div
      class="bg-white rounded-lg max-w-4xl w-full max-h-[95vh] p-6 flex flex-col space-y-4 shadow-lg overflow-hidden"
      style="display: flex; flex-direction: column;"
    >
      <div class="flex items-center justify-center space-x-4">
        <button id="prev-month" aria-label="Tháng trước" class="text-2xl text-[#9BBA74] hover:text-[#8aa85a] focus:outline-none focus:ring-2 focus:ring-[#9BBA74] rounded">
          <i class="fas fa-chevron-left"></i>
        </button>
        <h2
          id="statistics-title"
          class="text-2xl font-semibold text-gray-800 text-center flex-1 select-none"
        >
          Báo cáo
        </h2>
        <button id="next-month" aria-label="Tháng sau" class="text-2xl text-[#9BBA74] hover:text-[#8aa85a] focus:outline-none focus:ring-2 focus:ring-[#9BBA74] rounded">
          <i class="fas fa-chevron-right"></i>
        </button>
      </div>
      <div class="flex flex-col md:flex-row md:space-x-6 flex-grow overflow-hidden">
        <!-- Calendar -->
        <div class="md:w-1/2 overflow-auto max-h-[80vh] border border-gray-300 rounded p-4 bg-gray-50">
          <div id="calendar" class="grid grid-cols-7 gap-1 text-center select-none"></div>
        </div>
        <!-- Summary -->
        <div class="md:w-1/2 overflow-auto max-h-[80vh] border border-gray-300 rounded p-4 bg-white flex flex-col">
          <h3 id="summary-date" class="text-xl font-semibold mb-4 text-center select-none">Không có ngày tập trung nào.</h3>
          <div id="summary-content" class="space-y-4 text-gray-700 flex-grow overflow-auto"></div>
          <div class="mt-4 flex justify-center">
            <button
              id="statistics-close"
              class="px-6 py-2 rounded bg-[#DC143C] hover:bg-[#b0102a] text-white font-semibold focus:outline-none focus:ring-2 focus:ring-[#b0102a]"
              type="button"
            >
              Đóng
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Tasks modal -->
  <div
    id="tasks-modal"
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 hidden"
    role="dialog"
    aria-modal="true"
    aria-labelledby="tasks-title"
  >
    <div
      class="bg-white rounded-lg max-w-md w-full p-6 flex flex-col space-y-6 shadow-lg"
    >
      <h2
        id="tasks-title"
        class="text-2xl font-semibold text-gray-800 text-center"
      >
        Nhiệm vụ tích lũy 7 ngày tập trung liên tục
      </h2>
      <div class="flex flex-col items-center space-y-4">
        <img
          src="https://i.ibb.co/JjHyk2vX/2316-CFE1-22-EA-4632-9307-73-B7-AE643-FB8.png"
          alt="Hình ảnh bánh gấu màu nâu vàng, bánh ngọt tròn với khuôn mặt gấu dễ thương, nền trắng"
          class="w-40 h-40 object-contain"
          draggable="false"
        />
        <p class="text-center text-gray-700 text-lg max-w-xs">
          Hoàn thành nhiệm vụ tích lũy 7 ngày tập trung liên tục để nhận được bánh gấu!
        </p>
        <div class="w-full max-w-xs bg-gray-200 rounded-full h-6 overflow-hidden">
          <div
            id="task-progress-bar"
            class="h-6 bg-[#9BBA74] transition-all duration-500"
            style="width: 0%;"
            aria-valuemin="0"
            aria-valuemax="7"
            aria-valuenow="0"
            role="progressbar"
            aria-label="Tiến độ nhiệm vụ 7 ngày tập trung liên tục"
          ></div>
        </div>
        <p id="task-progress-text" class="text-center font-semibold text-gray-800 text-lg select-none">0 / 7 ngày</p>
      </div>
      <button
        id="tasks-close"
        class="mt-4 px-6 py-2 rounded bg-[#DC143C] hover:bg-[#b0102a] text-white font-semibold mx-auto focus:outline-none focus:ring-2 focus:ring-[#b0102a]"
        type="button"
      >
        Đóng
      </button>
    </div>
  </div>

  <audio id="background-music" loop preload="auto" src="https://github.com/thuyvannnnnn/Focus-and-frost/raw/refs/heads/main/45.audio.mp3"></audio>

  <script src="https://accounts.google.com/gsi/client" async defer></script>

  <script>
    // Data
    const cakes = {
      Macaron: {
        name: "Macaron",
        img: "https://i.ibb.co/4nK5Z7L0/1-C4-A3268-5-EA5-49-C2-83-E5-318-CC48-C1619.png",
        alt: "Hình ảnh Macaron màu hồng pastel, bánh ngọt tròn nhỏ xinh xắn, nền trắng",
      },
      "Cà tím": {
        name: "Cà tím",
        img: "https://i.ibb.co/nN5GQxNr/IMG-7291.png",
        alt: "Hình ảnh quả cà tím tím tươi, bóng mượt, nền trắng",
      },
    };

    const decorations = [
      {
        name: "Nến",
        img: "https://i.ibb.co/Pv8CLqvH/Untitled-design-4.png",
        alt: "Hình ảnh cây nến trang trí màu trắng với ngọn lửa vàng, nền trắng",
      },
      {
        name: "Kem 1",
        img: "https://i.ibb.co/yBct9mVm/Untitled-design-33.png",
        alt: "Hình ảnh kem trang trí màu trắng kem, nền trắng",
      },
    ];

    const plates = [
      {
        name: "Hồng",
        img: "https://i.ibb.co/0jbhSHK7/IMG-7290.png",
        alt: "Hình ảnh đĩa màu hồng pastel tròn, nền trắng",
      },
      {
        name: "Xanh lá",
        img: "https://i.ibb.co/39zdJxr9/IMG-7288.png",
        alt: "Hình ảnh đĩa màu xanh lá pastel tròn, nền trắng",
      },
    ];

    const bearCakeReward = {
      type: "cake",
      name: "Bánh gấu",
      img: "https://i.ibb.co/JjHyk2vX/2316-CFE1-22-EA-4632-9307-73-B7-AE643-FB8.png",
      alt: "Hình ảnh bánh gấu màu nâu vàng, bánh ngọt tròn với khuôn mặt gấu dễ thương, nền trắng",
    };

    // State
    let selectedCake = "Macaron";
    let selectedTime = { h: 0, m: 0, s: 0 };
    let timerInterval = null;
    let isRunning = false;
    let remainingSeconds = 0;
    let elapsedSeconds = 0; // time already counted before pause
    let rewardInventory = JSON.parse(localStorage.getItem("rewardInventory")) || [];
    let sessionHistory = JSON.parse(localStorage.getItem("sessionHistory")) || [];
    let user = JSON.parse(localStorage.getItem("user")) || null; // userID or null

    // Current calendar view year and month
    let currentYear, currentMonth;

    // Elements
    const cakeImageEl = document.getElementById("cake-image");
    const circleCakeBtn = document.getElementById("circle-cake");
    const selectedCakeNameEl = document.getElementById("selected-cake-name");
    const btnStartStop = document.getElementById("btn-start-stop");
    const inputHour = document.getElementById("input-hour");
    const inputMinute = document.getElementById("input-minute");
    const inputSecond = document.getElementById("input-second");
    const menuSelectCake = document.getElementById("menu-select-cake");
    const menuCakeList = document.getElementById("menu-cake-list");
    const cookingGif = document.getElementById("cooking-gif");
    const rewardModal = document.getElementById("reward-modal");
    const rewardContent = document.getElementById("reward-content");
    const rewardConfirmBtn = document.getElementById("reward-confirm");
    const feedbackBtn = document.getElementById("btn-feedback");
    const feedbackForm = document.getElementById("feedback-form");
    const feedbackMessage = document.getElementById("feedback-message");
    const googleLoginBtn = document.getElementById("googleLoginBtn");
    const loginText = document.getElementById("loginText");
    const backgroundMusic = document.getElementById("background-music");
    const timeProgressBar = document.getElementById("time-progress-bar");

    // Statistics modal elements
    const statisticsModal = document.getElementById("statistics-modal");
    const statisticsCloseBtn = document.getElementById("statistics-close");
    const calendarEl = document.getElementById("calendar");
    const summaryDateEl = document.getElementById("summary-date");
    const summaryContentEl = document.getElementById("summary-content");
    const btnStatistics = document.getElementById("btn-statistics");
    const prevMonthBtn = document.getElementById("prev-month");
    const nextMonthBtn = document.getElementById("next-month");

    // Tasks modal elements
    const tasksModal = document.getElementById("tasks-modal");
    const tasksCloseBtn = document.getElementById("tasks-close");
    const btnTasks = document.getElementById("btn-tasks");
    const taskProgressBar = document.getElementById("task-progress-bar");
    const taskProgressText = document.getElementById("task-progress-text");

    // Initialize
    function updateCakeDisplay() {
      const cake = cakes[selectedCake];
      cakeImageEl.src = cake.img;
      cakeImageEl.alt = cake.alt;
      selectedCakeNameEl.textContent = cake.name;
    }

    function updateStartButtonState() {
      const h = Math.min(Math.max(parseInt(inputHour.value) || 0, 0), 23);
      const m = Math.min(Math.max(parseInt(inputMinute.value) || 0, 0), 59);
      const s = Math.min(Math.max(parseInt(inputSecond.value) || 0, 0), 59);
      const hasTime = h + m + s > 0 || elapsedSeconds > 0;
      const hasCake = !!selectedCake;
      btnStartStop.disabled = !(hasTime && hasCake);
      btnStartStop.classList.toggle("bg-[#9BBA74]", !isRunning && !btnStartStop.disabled);
      btnStartStop.classList.toggle("hover:bg-[#8aa85a]", !isRunning && !btnStartStop.disabled);
      btnStartStop.classList.toggle("bg-[#DC143C]", isRunning);
      btnStartStop.classList.toggle("hover:bg-[#b0102a]", isRunning);
      if (isRunning) {
        btnStartStop.textContent = "Dừng lại";
        btnStartStop.style.color = "white";
      } else {
        btnStartStop.style.color = "white";
        btnStartStop.textContent = elapsedSeconds > 0 ? "Dùng lại" : "Bắt đầu";
      }
    }

    function parseTimeInputs() {
      return {
        h: Math.min(Math.max(parseInt(inputHour.value) || 0, 0), 23),
        m: Math.min(Math.max(parseInt(inputMinute.value) || 0, 0), 59),
        s: Math.min(Math.max(parseInt(inputSecond.value) || 0, 0), 59),
      };
    }

    function totalSeconds(time) {
      return time.h * 3600 + time.m * 60 + time.s;
    }

    function formatTime(seconds) {
      const h = Math.floor(seconds / 3600);
      const m = Math.floor((seconds % 3600) / 60);
      const s = seconds % 60;
      return (
        (h > 0 ? String(h).padStart(2, "0") + ":" : "") +
        String(m).padStart(2, "0") +
        ":" +
        String(s).padStart(2, "0")
      );
    }

    function updateTimeInputsFromRemaining() {
      const h = Math.floor(remainingSeconds / 3600);
      const m = Math.floor((remainingSeconds % 3600) / 60);
      const s = remainingSeconds % 60;
      inputHour.value = h > 0 ? h : "";
      inputMinute.value = m > 0 || h > 0 ? m : "";
      inputSecond.value = s > 0 || m > 0 || h > 0 ? s : "";
    }

    function updateProgressBar() {
      if (selectedTimeTotalSeconds === 0) {
        timeProgressBar.style.width = "0%";
        return;
      }
      const percent = (remainingSeconds / selectedTimeTotalSeconds) * 100;
      timeProgressBar.style.width = percent + "%";
    }

    let selectedTimeTotalSeconds = 0;

    function startTimer() {
      if (isRunning) return;
      if (elapsedSeconds === 0) {
        selectedTime = parseTimeInputs();
        selectedTimeTotalSeconds = totalSeconds(selectedTime);
        remainingSeconds = selectedTimeTotalSeconds;
      } else {
        remainingSeconds = selectedTimeTotalSeconds - elapsedSeconds;
      }
      if (remainingSeconds <= 0) return;
      isRunning = true;
      updateStartButtonState();
      cookingGif.classList.remove("hidden");
      cakeImageEl.classList.add("hidden");
      backgroundMusic.play().catch(() => {});
      updateTimeInputsFromRemaining();
      updateProgressBar();
      timerInterval = setInterval(() => {
        remainingSeconds--;
        elapsedSeconds++;
        updateTimeInputsFromRemaining();
        updateProgressBar();
        if (remainingSeconds <= 0) {
          stopTimer(true);
        }
      }, 1000);
      disableInputs(true);
    }

    function stopTimer(finished = false) {
      if (!isRunning) return;
      isRunning = false;
      updateStartButtonState();
      clearInterval(timerInterval);
      timerInterval = null;
      cookingGif.classList.add("hidden");
      cakeImageEl.classList.remove("hidden");
      backgroundMusic.pause();
      backgroundMusic.currentTime = 0;
      disableInputs(false);
      if (finished) {
        saveSessionHistory(elapsedSeconds);
        incrementTaskProgressIfFirstToday();
        sendRewardsToDecoration();
        showReward(elapsedSeconds);
        resetTimerState();
        if (!statisticsModal.classList.contains("hidden")) {
          renderCalendar(currentYear, currentMonth);
          const lastSession = sessionHistory[sessionHistory.length - 1];
          if (lastSession) {
            const dateStr = lastSession.date.slice(0, 10);
            showSummaryForDate(dateStr);
            updateStatisticsTitle(dateStr);
          }
        }
      }
    }

    function resetTimerState() {
      elapsedSeconds = 0;
      inputHour.value = "";
      inputMinute.value = "";
      inputSecond.value = "";
      selectedTimeTotalSeconds = 0;
      timeProgressBar.style.width = "100%";
      updateStartButtonState();
    }

    function disableInputs(disable) {
      inputHour.disabled = disable;
      inputMinute.disabled = disable;
      inputSecond.disabled = disable;
      circleCakeBtn.disabled = disable;
      document.getElementById("btn-decoration").disabled = disable;
      document.getElementById("btn-statistics").disabled = disable;
      document.getElementById("btn-tasks").disabled = disable;
      document.getElementById("btn-clear-data").disabled = disable;
    }

    function showReward(elapsed) {
      const timeMinutes = elapsed / 60;
      let rewards = [];
      rewards.push({
        type: "cake",
        name: selectedCake,
        img: cakes[selectedCake].img,
        alt: cakes[selectedCake].alt,
      });
      if (timeMinutes >= 10) {
        const existingDecorations = rewardInventory
          .filter((r) => r.type === "decoration")
          .map((r) => r.name);
        const existingPlates = rewardInventory
          .filter((r) => r.type === "plate")
          .map((r) => r.name);

        const availableDecorations = decorations.filter(
          (d) => !existingDecorations.includes(d.name)
        );
        const decorationPool =
          availableDecorations.length > 0 ? availableDecorations : decorations;
        const decoration =
          decorationPool[Math.floor(Math.random() * decorationPool.length)];

        const availablePlates = plates.filter(
          (p) => !existingPlates.includes(p.name)
        );
        const platePool = availablePlates.length > 0 ? availablePlates : plates;
        const plate = platePool[Math.floor(Math.random() * platePool.length)];

        rewards.push(
          {
            type: "decoration",
            name: decoration.name,
            img: decoration.img,
            alt: decoration.alt,
          },
          {
            type: "plate",
            name: plate.name,
            img: plate.img,
            alt: plate.alt,
          }
        );
      }

      rewardInventory = rewardInventory.concat(rewards);
      localStorage.setItem("rewardInventory", JSON.stringify(rewardInventory));

      rewardContent.innerHTML = "";
      rewards.forEach((r) => {
        const div = document.createElement("div");
        div.className = "flex flex-col items-center space-y-1";
        const img = document.createElement("img");
        img.src = r.img;
        img.alt = r.alt;
        img.className = "w-24 h-24 object-contain";
        img.draggable = false;
        const span = document.createElement("span");
        span.className = "text-gray-800 font-semibold text-center";
        span.textContent = r.name;
        div.appendChild(img);
        div.appendChild(span);
        rewardContent.appendChild(div);
      });
      const textLine = document.createElement("p");
      textLine.className = "text-center font-semibold text-lg text-gray-900 mt-2";
      textLine.textContent =
        "Hoan hô! Bạn đã nhận được " +
        rewards.map((r) => r.name).join(", ") +
        ".";
      rewardContent.appendChild(textLine);

      rewardModal.classList.remove("hidden");
    }

    // Send rewards to decoration page by saving to localStorage key "decorationRewards"
    function sendRewardsToDecoration() {
      localStorage.setItem("decorationRewards", JSON.stringify(rewardInventory));
    }

    function renderCakeMenu() {
      menuCakeList.innerHTML = "";
      const uniqueCakes = Object.keys(cakes);
      uniqueCakes.forEach((cakeName) => {
        const cake = cakes[cakeName];
        const btn = document.createElement("button");
        btn.type = "button";
        btn.className = "flex flex-col items-center space-y-1 focus:outline-none focus:ring-2 focus:ring-[#9BBA74] rounded";
        btn.setAttribute("data-cake", cakeName);
        btn.setAttribute("aria-label", `Chọn món ${cakeName}`);

        const img = document.createElement("img");
        img.src = cake.img;
        img.alt = cake.alt;
        img.className = "w-20 h-20 object-contain";
        img.draggable = false;

        const span = document.createElement("span");
        span.className = "text-sm font-semibold text-gray-700";
        span.textContent = cakeName;

        btn.appendChild(img);
        btn.appendChild(span);

        btn.addEventListener("click", () => {
          if (isRunning) return;
          selectedCake = cakeName;
          updateCakeDisplay();
          menuSelectCake.classList.add("hidden");
          updateStartButtonState();
        });

        menuCakeList.appendChild(btn);
      });
    }

    function renderCalendar(year, month) {
      calendarEl.innerHTML = "";
      currentYear = year;
      currentMonth = month;

      const firstDay = new Date(year, month, 1);
      const lastDay = new Date(year, month + 1, 0);
      const daysInMonth = lastDay.getDate();
      const startWeekday = firstDay.getDay();

      const daysOfWeek = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
      daysOfWeek.forEach(dow => {
        const dowEl = document.createElement("div");
        dowEl.textContent = dow;
        dowEl.className = "font-semibold text-gray-600";
        calendarEl.appendChild(dowEl);
      });

      for (let i = 0; i < startWeekday; i++) {
        const emptyCell = document.createElement("div");
        calendarEl.appendChild(emptyCell);
      }

      for (let day = 1; day <= daysInMonth; day++) {
        const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        const dayCell = document.createElement("button");
        dayCell.type = "button";
        dayCell.textContent = day;
        dayCell.className = "p-2 rounded hover:bg-[#9BBA74] hover:text-white focus:outline-none focus:ring-2 focus:ring-[#9BBA74]";

        const hasSession = sessionHistory.some(session => session.date.startsWith(dateStr));
        if (hasSession) {
          dayCell.classList.add("font-bold");
        } else {
          dayCell.classList.add("text-gray-400");
        }

        dayCell.addEventListener("click", () => {
          showSummaryForDate(dateStr);
          updateStatisticsTitle(dateStr);
        });

        calendarEl.appendChild(dayCell);
      }
    }

    function showSummaryForDate(dateStr) {
      const sessions = sessionHistory.filter(session => session.date.startsWith(dateStr));
      if (sessions.length === 0) {
        summaryDateEl.textContent = "Không có ngày tập trung nào.";
        summaryContentEl.innerHTML = "";
        return;
      }
      summaryDateEl.textContent = `Báo cáo ngày ${dateStr}`;
      summaryContentEl.innerHTML = "";

      let totalSeconds = 0;
      sessions.forEach(session => {
        totalSeconds += session.timeSeconds || 0;
      });

      const totalTimeDiv = document.createElement("div");
      totalTimeDiv.className = "text-center font-semibold text-lg";
      totalTimeDiv.textContent = `Tổng thời gian tập trung: ${formatTime(totalSeconds)}`;
      summaryContentEl.appendChild(totalTimeDiv);
    }

    function updateStatisticsTitle(dateStr) {
      summaryDateEl.textContent = `Báo cáo ngày ${dateStr}`;
    }

    function calculateConsecutiveDays() {
      if (!sessionHistory.length) return 0;
      const sortedSessions = [...sessionHistory].sort((a, b) => new Date(a.date) - new Date(b.date));
      const sessionDatesSet = new Set();
      sortedSessions.forEach(s => {
        if ((s.durationMinutes || 0) >= 1) {
          sessionDatesSet.add(s.date.slice(0,10));
        }
      });
      if (sessionDatesSet.size === 0) return 0;

      const dates = Array.from(sessionDatesSet).sort();

      const today = new Date();
      today.setHours(0,0,0,0);

      const lastDateStr = dates[dates.length -1];
      const lastDate = new Date(lastDateStr);

      let count = 0;
      let currentDate = lastDate > today ? today : lastDate;

      while (true) {
        const dateStr = currentDate.toISOString().slice(0,10);
        if (sessionDatesSet.has(dateStr)) {
          count++;
          currentDate.setDate(currentDate.getDate() -1);
        } else {
          break;
        }
      }
      return count;
    }

    function updateTaskProgressBar(progress) {
      const maxDays = 7;
      const percent = Math.min((progress / maxDays) * 100, 100);
      taskProgressBar.style.width = percent + "%";
      taskProgressBar.setAttribute("aria-valuenow", progress);
      taskProgressText.textContent = `${progress} / 7 ngày`;

      if (progress >= maxDays) {
        const hasBearCake = rewardInventory.some(r => r.name === bearCakeReward.name);
        if (!hasBearCake) {
          rewardInventory.push(bearCakeReward);
          localStorage.setItem("rewardInventory", JSON.stringify(rewardInventory));
          rewardContent.innerHTML = "";
          const div = document.createElement("div");
          div.className = "flex flex-col items-center space-y-1";
          const img = document.createElement("img");
          img.src = bearCakeReward.img;
          img.alt = bearCakeReward.alt;
          img.className = "w-24 h-24 object-contain";
          img.draggable = false;
          const span = document.createElement("span");
          span.className = "text-gray-800 font-semibold text-center";
          span.textContent = bearCakeReward.name;
          div.appendChild(img);
          div.appendChild(span);
          rewardContent.appendChild(div);
          const textLine = document.createElement("p");
          textLine.className = "text-center font-semibold text-lg text-gray-900 mt-2";
          textLine.textContent = `Chúc mừng! Bạn đã hoàn thành nhiệm vụ và nhận được ${bearCakeReward.name}.`;
          rewardContent.appendChild(textLine);
          rewardModal.classList.remove("hidden");
        }
      }
    }

    // Increment task progress by 1 only if no session recorded today yet
    function incrementTaskProgressIfFirstToday() {
      const todayStr = new Date().toISOString().slice(0,10);
      const sessionsToday = sessionHistory.filter(s => s.date.startsWith(todayStr));
      if (sessionsToday.length === 1) { // first session today
        let progress = parseInt(localStorage.getItem('taskProgress')) || 0;
        progress = Math.min(progress + 1, 7);
        localStorage.setItem('taskProgress', progress);
        updateTaskProgressBar(progress);
      }
    }

    inputHour.addEventListener("input", () => {
      if (inputHour.value.length > 2) inputHour.value = inputHour.value.slice(0, 2);
      updateStartButtonState();
    });
    inputMinute.addEventListener("input", () => {
      if (inputMinute.value.length > 2) inputMinute.value = inputMinute.value.slice(0, 2);
      updateStartButtonState();
    });
    inputSecond.addEventListener("input", () => {
      if (inputSecond.value.length > 2) inputSecond.value = inputSecond.value.slice(0, 2);
      updateStartButtonState();
    });

    btnStartStop.addEventListener("click", () => {
      if (isRunning) {
        stopTimer(false);
      } else {
        startTimer();
      }
    });

    circleCakeBtn.addEventListener("click", () => {
      if (isRunning) return;
      menuSelectCake.classList.toggle("hidden");
    });

    rewardConfirmBtn.addEventListener("click", () => {
      rewardModal.classList.add("hidden");
    });

    feedbackBtn.addEventListener("click", () => {
      const message = prompt("Vui lòng nhập góp ý của bạn:");
      if (message === null) return;
      if (message.trim() === "") {
        alert("Vui lòng nhập nội dung góp ý.");
        return;
      }
      feedbackMessage.value = message.trim();
      feedbackForm.submit();
    });

    const btnClearData = document.getElementById("btn-clear-data");
    btnClearData.addEventListener("click", () => {
      if (confirm("Bạn có chắc chắn muốn xóa toàn bộ dữ liệu tập trung? Hành động này không thể hoàn tác.")) {
        localStorage.removeItem("sessionHistory");
        sessionHistory = [];
        localStorage.removeItem("taskProgress");
        localStorage.removeItem("rewardInventory");
        localStorage.removeItem("decorationRewards");
        if (!statisticsModal.classList.contains("hidden")) {
          renderCalendar(currentYear, currentMonth);
          summaryDateEl.textContent = "Không có ngày tập trung nào.";
          summaryContentEl.innerHTML = "";
        }
        updateTaskProgressBar(0);
        alert("Đã xóa toàn bộ dữ liệu tập trung, tiến độ nhiệm vụ và phần thưởng.");
      }
    });

    googleLoginBtn.addEventListener("click", () => {
      if (user) {
        user = null;
        localStorage.removeItem("user");
        loginText.textContent = "Đăng nhập";
        alert("Bạn đã đăng xuất.");
      } else {
        google.accounts.id.initialize({
          client_id: "YOUR_CLIENT_ID_HERE",
          callback: handleCredentialResponse
        });
        google.accounts.id.prompt();
      }
    });

    function handleCredentialResponse(response) {
      const data = parseJwt(response.credential);
      user = {
        id: data.sub,
        name: data.name,
        email: data.email,
        picture: data.picture
      };
      localStorage.setItem("user", JSON.stringify(user));
      loginText.textContent = "Đăng xuất";
      alert("Bạn đã đăng nhập thành công: " + user.name);
      console.log("Thông tin user:", user);
    }

    function parseJwt(token) {
      let base64Url = token.split('.')[1];
      let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
      let jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
      }).join(''));
      return JSON.parse(jsonPayload);
    }

    window.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        if (!rewardModal.classList.contains("hidden")) {
          rewardModal.classList.add("hidden");
        }
        if (!menuSelectCake.classList.contains("hidden")) {
          menuSelectCake.classList.add("hidden");
        }
        if (!statisticsModal.classList.contains("hidden")) {
          statisticsModal.classList.add("hidden");
        }
        if (!tasksModal.classList.contains("hidden")) {
          tasksModal.classList.add("hidden");
        }
      }
    });

    document.getElementById('btn-decoration').addEventListener('click', function() {
      window.location.href = 'decorate.html';
    });

    btnStatistics.addEventListener('click', () => {
      if (isRunning) return;
      const now = new Date();
      renderCalendar(now.getFullYear(), now.getMonth());
      summaryDateEl.textContent = "Không có ngày tập trung nào.";
      summaryContentEl.innerHTML = "";
      statisticsModal.classList.remove("hidden");
    });

    statisticsCloseBtn.addEventListener('click', () => {
      statisticsModal.classList.add("hidden");
    });

    btnTasks.addEventListener('click', () => {
      if (isRunning) return;
      const progress = parseInt(localStorage.getItem('taskProgress')) || 0;
      updateTaskProgressBar(progress);
      tasksModal.classList.remove("hidden");
    });

    tasksCloseBtn.addEventListener('click', () => {
      tasksModal.classList.add("hidden");
    });

    prevMonthBtn.addEventListener("click", () => {
      if (isRunning) return;
      currentMonth--;
      if (currentMonth < 0) {
        currentMonth = 11;
        currentYear--;
      }
      renderCalendar(currentYear, currentMonth);
      summaryDateEl.textContent = "Không có ngày tập trung nào.";
      summaryContentEl.innerHTML = "";
    });

    nextMonthBtn.addEventListener("click", () => {
      if (isRunning) return;
      currentMonth++;
      if (currentMonth > 11) {
        currentMonth = 0;
        currentYear++;
      }
      renderCalendar(currentYear, currentMonth);
      summaryDateEl.textContent = "Không có ngày tập trung nào.";
      summaryContentEl.innerHTML = "";
    });

    window.addEventListener("load", () => {
      updateCakeDisplay();
      updateStartButtonState();
      renderCakeMenu();

      if (user) {
        loginText.textContent = "Đăng xuất";
      }

      timeProgressBar.style.width = "100%";

      const now = new Date();
      currentYear = now.getFullYear();
      currentMonth = now.getMonth();

      const progress = parseInt(localStorage.getItem('taskProgress')) || 0;
      updateTaskProgressBar(progress);
    });

    // Save session history and update in-memory and localStorage
    function saveSessionHistory(elapsedSeconds) {
      let history = JSON.parse(localStorage.getItem('sessionHistory')) || [];
      const now = new Date();
      const durationMinutes = Math.floor(elapsedSeconds / 60);
      const newSession = {
        date: now.toISOString(),
        durationMinutes: durationMinutes,
        cake: selectedCake || null,
        timeSeconds: elapsedSeconds || 0,
        rewards: [],
        userId: user ? user.id : null
      };
      history.push(newSession);
      localStorage.setItem('sessionHistory', JSON.stringify(history));
      sessionHistory = history;
      console.log("Đã lưu sessionHistory:", history);
    }
  </script>
</body>
</html>

