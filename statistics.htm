<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Báo cáo Pomodoro dạng lịch tháng</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
  <link href="https://fonts.googleapis.com/css2?family=Inter&display=swap" rel="stylesheet" />
  <style>
    body { font-family: 'Inter', sans-serif; }
  </style>
</head>
<body class="bg-gray-50 min-h-screen flex flex-col">
  <header class="bg-white shadow p-4 flex items-center justify-between sticky top-0 z-20">
    <button id="prevMonthBtn" aria-label="Tháng trước" class="p-2 rounded hover:bg-gray-200 transition">
      <i class="fas fa-chevron-left text-gray-600"></i>
    </button>
    <div id="currentMonthYear" class="text-lg font-medium text-gray-700 min-w-[140px] text-center"></div>
    <button id="nextMonthBtn" aria-label="Tháng sau" class="p-2 rounded hover:bg-gray-200 transition">
      <i class="fas fa-chevron-right text-gray-600"></i>
    </button>
  </header>

  <main class="flex-grow p-4 max-w-4xl mx-auto w-full">
    <div id="calendar" class="grid grid-cols-7 gap-1 text-center select-none"></div>
  </main>

  <!-- Bottom Sheet -->
  <div id="bottomSheet" class="fixed inset-x-0 bottom-0 bg-white rounded-t-2xl shadow-xl max-h-[70vh] overflow-y-auto transform translate-y-full transition-transform duration-300 z-30" role="dialog" aria-modal="true" aria-labelledby="bottomSheetTitle">
    <div class="p-4 border-b border-gray-200 flex justify-between items-center sticky top-0 bg-white z-10">
      <h2 id="bottomSheetTitle" class="text-lg font-semibold text-gray-800"></h2>
      <button id="closeBottomSheet" aria-label="Đóng" class="text-gray-600 hover:text-gray-900 transition">
        <i class="fas fa-times fa-lg"></i>
      </button>
    </div>
    <div class="p-4 space-y-3" id="bottomSheetContent"></div>
  </div>

  <script>
    function pad(num) { return num.toString().padStart(2, '0'); }
    function formatDate(date) { return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`; }
    function formatDateDisplay(date) { return `${pad(date.getDate())}/${pad(date.getMonth() + 1)}/${date.getFullYear()}`; }
    function parseDateString(dateStr) { const p = dateStr.split('-'); return new Date(p[0], p[1] - 1, p[2]); }

    function loadSessionHistory() {
      try {
        const data = localStorage.getItem('sessionHistory');
        if (!data) return [];
        return JSON.parse(data);
      } catch { return []; }
    }

    function getDayDetail(dateStr) {
      const sessionHistory = loadSessionHistory();
      const daySessions = sessionHistory.filter(session => session.date === dateStr);
      if (daySessions.length === 0) {
        return { date: dateStr, totalMinutes: 0, pomodoros: 0, sessions: [] };
      }
      const totalSeconds = daySessions.reduce((sum, session) => sum + session.durationSeconds, 0);
      const totalMinutes = Math.floor(totalSeconds / 60);
      return {
        date: dateStr,
        totalMinutes: totalMinutes,
        pomodoros: daySessions.reduce((sum, session) => sum + session.pomodoros, 0),
        sessions: daySessions.map(session => ({
          startTime: session.startTime,
          endTime: session.endTime,
          duration: session.durationMinutes,
          task: session.task
        }))
      };
    }

    function renderWeekDays() {
      const weekDays = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
      return weekDays.map(d => `<div class="font-semibold text-gray-600 py-2 border-b border-gray-300 select-none">${d}</div>`).join('');
    }

    function renderCalendar(year, month) {
      const calendarEl = document.getElementById('calendar');
      calendarEl.innerHTML = '';
      document.getElementById('currentMonthYear').textContent = `Tháng ${month + 1} ${year}`;
      calendarEl.insertAdjacentHTML('beforeend', renderWeekDays());

      const firstDay = new Date(year, month, 1);
      const lastDay = new Date(year, month + 1, 0);
      const daysInMonth = lastDay.getDate();
      const firstDayWeekday = firstDay.getDay();
      const sessionHistory = loadSessionHistory();

      for (let i = 0; i < firstDayWeekday; i++) {
        const emptyCell = document.createElement('div');
        emptyCell.className = 'py-3';
        calendarEl.appendChild(emptyCell);
      }

      for (let day = 1; day <= daysInMonth; day++) {
        const dateStr = `${year}-${pad(month + 1)}-${pad(day)}`;
        const daySessions = sessionHistory.filter(session => session.date === dateStr);
        const totalMinutes = daySessions.reduce((sum, session) => sum + session.durationMinutes, 0);

        const dayBtn = document.createElement('button');
        dayBtn.type = 'button';
        dayBtn.className = 'relative w-full aspect-square flex flex-col items-center justify-center rounded-md text-gray-800 font-medium hover:bg-gray-200 transition p-2';
        dayBtn.setAttribute('aria-label', `Ngày ${day} tháng ${month + 1} ${year}`);

        const today = new Date();
        if (day === today.getDate() && month === today.getMonth() && year === today.getFullYear()) {
          dayBtn.classList.add('bg-red-50');
        }

        dayBtn.innerHTML = `<span class="font-medium">${day}</span>`;
        if (totalMinutes > 0) {
          const sessionsCount = daySessions.length;
          const infoDiv = document.createElement('div');
          infoDiv.className = 'mt-auto text-xs text-center';
          infoDiv.innerHTML = `
            <div class="text-green-600 font-medium">${totalMinutes} phút</div>
            <div class="text-gray-500">${sessionsCount} phiên</div>
          `;
          dayBtn.appendChild(infoDiv);
          dayBtn.classList.add('bg-green-50', 'border', 'border-green-200');
        }

        dayBtn.addEventListener('click', () => { openBottomSheet(dateStr); });
        calendarEl.appendChild(dayBtn);
      }
    }

    function openBottomSheet(dateStr) {
      const detail = getDayDetail(dateStr);
      document.getElementById('bottomSheetTitle').textContent = `Ngày ${formatDateDisplay(parseDateString(dateStr))}`;
      document.getElementById('bottomSheetContent').innerHTML = `
        <div class="space-y-4">
          <div class="flex justify-between items-center">
            <h3 class="font-bold">Tổng thời gian</h3>
            <span>${detail.totalMinutes} phút (${detail.pomodoros} pomodoro)</span>
          </div>
          ${
            detail.sessions.length > 0
              ? `<div class="border-t pt-3">
                  <h3 class="font-bold mb-2">Các phiên làm việc</h3>
                  <ul class="space-y-3">
                    ${detail.sessions.map(session => `
                      <li class="flex justify-between items-center p-2 bg-gray-50 rounded">
                        <div>
                          <span class="font-medium">${session.startTime} → ${session.endTime}</span>
                          <p class="text-sm text-gray-600">${session.task}</p>
                        </div>
                        <span class="text-gray-700">${session.duration} phút</span>
                      </li>
                    `).join('')}
                  </ul>
                </div>`
              : '<p class="text-gray-500 text-center py-4">Không có phiên làm việc nào</p>'
          }
        </div>
      `;
      document.getElementById('bottomSheet').classList.remove('translate-y-full');
      document.getElementById('bottomSheet').classList.add('translate-y-0');
      document.body.style.overflow = 'hidden';
    }

    function closeBottomSheet() {
      document.getElementById('bottomSheet').classList.remove('translate-y-0');
      document.getElementById('bottomSheet').classList.add('translate-y-full');
      document.body.style.overflow = '';
    }

    document.getElementById('prevMonthBtn').addEventListener('click', () => {
      currentMonth--;
      if (currentMonth < 0) { currentMonth = 11; currentYear--; }
      renderCalendar(currentYear, currentMonth);
    });

    document.getElementById('nextMonthBtn').addEventListener('click', () => {
      currentMonth++;
      if (currentMonth > 11) { currentMonth = 0; currentYear++; }
      renderCalendar(currentYear, currentMonth);
    });

    document.getElementById('closeBottomSheet').addEventListener('click', closeBottomSheet);

    window.addEventListener('click', (e) => {
      const bottomSheet = document.getElementById('bottomSheet');
      if (!bottomSheet.classList.contains('translate-y-full') && !bottomSheet.contains(e.target) && e.target.tagName !== 'BUTTON') {
        closeBottomSheet();
      }
    });

    // Luôn tạo dữ liệu mẫu cho 15/08/2025
    const sampleData = [
      {
        date: "2025-08-15",
        startTime: "14:00",
        endTime: "14:10",
        durationMinutes: 10,
        durationSeconds: 600,
        pomodoros: 1,
        task: "Test hiển thị 15/08/2025",
        breaks: 0
      }
    ];
    localStorage.setItem('sessionHistory', JSON.stringify(sampleData));

    let currentDate = new Date();
    let currentYear = currentDate.getFullYear();
    let currentMonth = currentDate.getMonth();
    renderCalendar(currentYear, currentMonth);
  </script>
</body>
</html>
