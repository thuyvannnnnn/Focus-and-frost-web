<html lang="vi" class="h-full">
<head>
  <meta charset="utf-8" />
  <meta content="width=device-width, initial-scale=1" name="viewport" />
  <title>Trang tr√≠ b√°nh</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    rel="stylesheet"
  />
  <style>
    /* Hide scrollbar for vertical scroll container */
    .no-scrollbar::-webkit-scrollbar {
      display: none;
    }
    .no-scrollbar {
      -ms-overflow-style: none;
      scrollbar-width: none;
    }
    /* Transition for cake area shifting */
    #cake-area {
      transition: margin-right 0.3s ease;
    }
    /* When right panel is open, add margin-right to cake area */
    #cake-area.shifted {
      margin-right: 15vw;
      min-width: 0;
    }
    @media (max-width: 768px) {
      #cake-area.shifted {
        margin-right: 132px;
      }
    }
    /* Trash button styles */
    #trash-button {
      position: fixed;
      bottom: 100px;
      right: 1rem;
      width: 56px;
      height: 56px;
      background-color: #ef4444; /* red-500 */
      color: white;
      border-radius: 9999px;
      display: none;
      align-items: center;
      justify-content: center;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      cursor: pointer;
      z-index: 60;
      transition: background-color 0.2s ease;
    }
    #trash-button:hover {
      background-color: #dc2626; /* red-600 */
    }
    #trash-button.drag-over {
      background-color: #b91c1c; /* red-700 */
    }
  </style>
</head>
<body class="h-full relative overflow-hidden font-sans bg-gray-50">
  <div
    class="h-full w-full relative flex flex-col items-center justify-center select-none"
    id="app"
  >
    <img
      alt="Background image of a soft pastel colored kitchen with baking utensils and ingredients"
      class="fixed top-0 left-0 w-full h-full object-cover -z-10"
      draggable="false"
      height="1080"
      src="https://raw.githubusercontent.com/thuyvannnnnn/Focus-and-frost/main/IMG_8522.png"
      width="1920"
    />
    <button
      aria-label="Quay v·ªÅ trang ch√≠nh"
      class="absolute top-4 left-4 w-12 h-12 rounded-full bg-white bg-opacity-70 backdrop-blur-sm flex items-center justify-center shadow-md hover:bg-opacity-90 transition"
      id="btn-back-main"
      type="button"
    >
      <i class="fas fa-home text-gray-700 text-xl"></i>
    </button>
    <button
      aria-label="M·ªü l·ªãch s·ª≠ b√°nh ƒë√£ trang tr√≠"
      class="absolute bottom-4 left-4 w-10 h-10 rounded-full bg-white bg-opacity-70 backdrop-blur-sm flex items-center justify-center shadow-md hover:bg-opacity-90 transition text-lg"
      id="btn-history"
      type="button"
    >
      üïì
    </button>
    <button
      aria-label="B·∫Øt ƒë·∫ßu ch·ªçn b√°nh"
      class="absolute bottom-4 right-4 bg-green-600 hover:bg-green-700 active:bg-green-800 text-white font-semibold rounded-full px-6 py-3 shadow-lg transition disabled:opacity-50 disabled:cursor-not-allowed"
      id="btn-start"
      type="button"
    >
      B·∫Øt ƒë·∫ßu
    </button>
    <div
      aria-label="Khu v·ª±c trang tr√≠ b√°nh"
      class="relative w-full max-w-md aspect-square mx-auto mt-[31%] mb-24 flex items-center justify-center"
      id="cake-area"
      style="min-height: 320px"
    >
      <img
        alt="ƒêƒ©a trang tr√≠ b√°nh, h√¨nh tr√≤n, m√†u be nh·∫°t, ki·ªÉu ƒë∆°n gi·∫£n"
        class="absolute top-[70%] left-[40%] -translate-x-1/2 -translate-y-1/2 w-64 h-64 object-contain pointer-events-none select-none"
        draggable="false"
        id="plate-img"
        src=""
        style="display: none"
      />
      <img
        alt="B√°nh mousse ba l·ªõp, h√¨nh tr√≤n, m√†u kem tr·∫Øng v√† h·ªìng nh·∫°t, trang tr√≠ ƒë∆°n gi·∫£n"
        class="absolute top-[60%] left-[40%] -translate-x-1/2 -translate-y-1/2 w-56 h-56 object-contain pointer-events-none select-none"
        draggable="false"
        id="cake-img"
        src=""
        style="display: none"
      />
      <div
        aria-label="Khu v·ª±c trang tr√≠ ƒë·ªì trang tr√≠ tr√™n b√°nh"
        class="absolute top-[60%] left-[40%] -translate-x-1/2 -translate-y-1/2 w-56 h-56 pointer-events-auto"
        id="decorations-container"
      ></div>
    </div>
    <div
      aria-atomic="true"
      aria-live="polite"
      class="fixed top-0 right-0 h-full w-0 md:w-0 overflow-y-auto bg-white bg-opacity-90 backdrop-blur-md shadow-lg transition-all no-scrollbar flex flex-col"
      id="right-panel"
      style="max-width: 15vw; min-width: 132px"
    ></div>
    <div
      class="fixed bottom-20 right-4 left-4 flex justify-between max-w-md mx-auto px-2"
      id="bottom-buttons"
      style="max-width: 280px; display: none"
    >
      <button
        class="bg-gray-300 hover:bg-gray-400 active:bg-gray-500 text-gray-800 font-semibold rounded-full px-5 py-2 shadow-md transition disabled:opacity-50 disabled:cursor-not-allowed"
        id="btn-back-step"
        type="button"
      >
        Quay v·ªÅ
      </button>
      <button
        class="bg-green-600 hover:bg-green-700 active:bg-green-800 text-white font-semibold rounded-full px-5 py-2 shadow-md transition disabled:opacity-50 disabled:cursor-not-allowed"
        id="btn-confirm-step"
        type="button"
      >
        X√°c nh·∫≠n
      </button>
    </div>
    <div
      aria-labelledby="history-title"
      aria-modal="true"
      class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm flex items-center justify-center p-4 z-50 hidden"
      id="history-modal"
      role="dialog"
    >
      <div
        class="bg-white rounded-lg max-w-md w-full max-h-[80vh] overflow-y-auto p-4 flex flex-col"
      >
        <h2 class="text-xl font-bold mb-4 text-center" id="history-title">
          L·ªãch s·ª≠ b√°nh ƒë√£ trang tr√≠
        </h2>
        <div
          class="flex flex-col gap-4 overflow-y-auto no-scrollbar"
          id="history-list"
        >
          <p class="text-center text-gray-600">Ch∆∞a c√≥ b√°nh ƒë√£ trang tr√≠ n√†o trong l·ªãch s·ª≠.</p>
        </div>
        <button
          class="mt-6 bg-red-500 hover:bg-red-600 active:bg-red-700 text-white font-semibold rounded-full px-5 py-2 shadow-md self-center w-32"
          id="btn-close-history"
          type="button"
        >
          ƒê√≥ng
        </button>
      </div>
    </div>
    <button
      id="trash-button"
      aria-label="X√≥a ƒë·ªì trang tr√≠"
      title="K√©o ƒë·ªì trang tr√≠ v√†o ƒë√¢y ƒë·ªÉ x√≥a"
      type="button"
    >
      <i class="fas fa-trash-alt text-2xl"></i>
    </button>
  </div>
  <script>
    (() => {
      const btnStart = document.getElementById("btn-start");
      const btnBackMain = document.getElementById("btn-back-main");
      const btnHistory = document.getElementById("btn-history");
      const btnCloseHistory = document.getElementById("btn-close-history");
      const historyModal = document.getElementById("history-modal");
      const historyList = document.getElementById("history-list");
      const rightPanel = document.getElementById("right-panel");
      const bottomButtons = document.getElementById("bottom-buttons");
      const btnBackStep = document.getElementById("btn-back-step");
      const btnConfirmStep = document.getElementById("btn-confirm-step");
      const cakeArea = document.getElementById("cake-area");
      const cakeImg = document.getElementById("cake-img");
      const plateImg = document.getElementById("plate-img");
      const decorationsContainer = document.getElementById("decorations-container");
      const trashButton = document.getElementById("trash-button");

      // Default data for first-time use only
      const defaultCakeInventory = [
        {
          id: "cake1",
          name: "B√°nh mousse ba l·ªõp",
          img: "https://raw.githubusercontent.com/thuyvannnnnn/Focus-and-frost/main/IMG_8523.png",
          alt: "B√°nh mousse ba l·ªõp, h√¨nh tr√≤n, m√†u kem tr·∫Øng v√† h·ªìng nh·∫°t, trang tr√≠ ƒë∆°n gi·∫£n"
        }
      ];
      const defaultPlateInventory = [
        {
          id: "plate1",
          name: "ƒêƒ©a m√†u be",
          img: "https://raw.githubusercontent.com/thuyvannnnnn/Focus-and-frost/main/IMG_8524.png",
          alt: "ƒêƒ©a m√†u be nh·∫°t, h√¨nh tr√≤n, ki·ªÉu ƒë∆°n gi·∫£n"
        }
      ];
      const defaultDecorateInventory = [
        {
          id: "dec1",
          name: "Kem trang tr√≠",
          img: "https://raw.githubusercontent.com/thuyvannnnnn/Focus-and-frost/main/IMG_8526.png",
          alt: "Kem trang tr√≠, h√¨nh ·∫£nh trang tr√≠ nh·ªè m√†u kem tr·∫Øng"
        }
      ];

      // Load inventories from localStorage or initialize with default if not present
      let cakeInventory = [];
      let plateInventory = [];
      let decorateInventory = [];
      let history = [];

      function initializeDataIfNeeded() {
        if (!localStorage.getItem("cakeInventory")) {
          localStorage.setItem("cakeInventory", JSON.stringify(defaultCakeInventory));
        }
        if (!localStorage.getItem("plateInventory")) {
          localStorage.setItem("plateInventory", JSON.stringify(defaultPlateInventory));
        }
        if (!localStorage.getItem("decorateInventory")) {
          localStorage.setItem("decorateInventory", JSON.stringify(defaultDecorateInventory));
        }
        if (!localStorage.getItem("rewardInventory")) {
          localStorage.setItem("rewardInventory", JSON.stringify([
            ...defaultCakeInventory.map(c => ({type:"cake", name:c.name, img:c.img, alt:c.alt})),
            ...defaultPlateInventory.map(p => ({type:"plate", name:p.name, img:p.img, alt:p.alt})),
            ...defaultDecorateInventory.map(d => ({type:"decoration", name:d.name, img:d.img, alt:d.alt}))
          ]));
        }
        if (!localStorage.getItem("decoratedCakes")) {
          localStorage.setItem("decoratedCakes", JSON.stringify([]));
        }
      }

      function loadInventories() {
        try {
          const cakeRaw = localStorage.getItem("cakeInventory");
          cakeInventory = cakeRaw ? JSON.parse(cakeRaw) : [];
          const plateRaw = localStorage.getItem("plateInventory");
          plateInventory = plateRaw ? JSON.parse(plateRaw) : [];
          const decorateRaw = localStorage.getItem("decorateInventory");
          decorateInventory = decorateRaw ? JSON.parse(decorateRaw) : [];
        } catch {
          cakeInventory = [];
          plateInventory = [];
          decorateInventory = [];
        }
        try {
          const historyData = localStorage.getItem("decoratedCakes");
          history = historyData ? JSON.parse(historyData) : [];
        } catch {
          history = [];
        }
      }

      let rewardInventory = {
        cake: cakeInventory,
        plate: plateInventory,
        decoration: decorateInventory,
        history: history,
      };

      let step = "idle";

      let selectedCake = null;
      let selectedDecorations = [];
      let selectedPlate = null;

      let dragState = {
        dragging: false,
        target: null,
        startX: 0,
        startY: 0,
        origX: 0,
        origY: 0,
        origScale: 1,
        index: null,
      };

      function autoSave() {
        const combinedRewardInventory = [
          ...cakeInventory.map(c => ({type:"cake", name:c.name, img:c.img, alt:c.alt})),
          ...decorateInventory.map(d => ({type:"decoration", name:d.name, img:d.img, alt:d.alt})),
          ...plateInventory.map(p => ({type:"plate", name:p.name, img:p.img, alt:p.alt}))
        ];
        localStorage.setItem("rewardInventory", JSON.stringify(combinedRewardInventory));
        localStorage.setItem("decoratedCakes", JSON.stringify(history));
        localStorage.setItem("plateInventory", JSON.stringify(plateInventory));
        localStorage.setItem("cakeInventory", JSON.stringify(cakeInventory));
        localStorage.setItem("decorateInventory", JSON.stringify(decorateInventory));
      }

      window.addEventListener("beforeunload", autoSave);

      btnBackMain.addEventListener("click", () => {
        autoSave();
        window.location.href = "index.html";
      });

      function clearRightPanel() {
        rightPanel.innerHTML = "";
      }

      function enableConfirmButton(enabled) {
        btnConfirmStep.disabled = !enabled;
      }

      function showBottomButtons(show) {
        bottomButtons.style.display = show ? "flex" : "none";
      }

      function resetDecorationDrag() {
        dragState.dragging = false;
        dragState.target = null;
        dragState.index = null;
      }

      function updateCakeAreaDisplay() {
        if (selectedCake) {
          cakeImg.src = selectedCake.img;
          cakeImg.alt = selectedCake.alt;
          cakeImg.style.display = "block";
        } else {
          cakeImg.style.display = "none";
          cakeImg.src = "";
          cakeImg.alt = "";
        }
        if (selectedPlate) {
          plateImg.src = selectedPlate.img;
          plateImg.alt = selectedPlate.alt;
          plateImg.style.display = "block";
        } else {
          plateImg.style.display = "none";
          plateImg.src = "";
          plateImg.alt = "";
        }
        renderDecorations();
      }

      function renderSelectCake() {
        step = "selectCake";
        clearRightPanel();
        showBottomButtons(true);
        btnBackStep.disabled = false;
        trashButton.style.display = "none";

        const title = document.createElement("h2");
        title.textContent = "Ch·ªçn b√°nh";
        title.className =
          "text-xl font-bold p-4 border-b border-gray-300 sticky top-0 bg-white z-10";
        rightPanel.appendChild(title);

        const list = document.createElement("div");
        list.className = "flex flex-col gap-3 p-4 overflow-y-auto no-scrollbar";
        list.style.minHeight = "100%";

        if (cakeInventory.length === 0) {
          const noCakeMsg = document.createElement("p");
          noCakeMsg.textContent = "Kh√¥ng c√≤n b√°nh n√†o ƒë·ªÉ ch·ªçn.";
          noCakeMsg.className = "text-center text-gray-600 font-semibold";
          list.appendChild(noCakeMsg);
          enableConfirmButton(false);
          selectedCake = null;
          updateCakeAreaDisplay();
        } else {
          btnBackStep.disabled = true;
          cakeInventory.forEach((cake) => {
            const item = document.createElement("label");
            item.className =
              "flex items-center gap-3 p-2 rounded-lg cursor-pointer border border-gray-300 hover:border-green-600 transition";

            const radio = document.createElement("input");
            radio.type = "radio";
            radio.name = "cake-select";
            radio.value = cake.id;
            radio.className = "w-5 h-5 cursor-pointer";
            radio.checked = selectedCake && selectedCake.id === cake.id;
            radio.setAttribute("aria-label", cake.name);

            radio.addEventListener("change", () => {
              selectedCake = cake;
              enableConfirmButton(true);
              updateCakeAreaDisplay();
            });

            const img = document.createElement("img");
            img.src = cake.img;
            img.alt = cake.alt;
            img.className =
              "w-16 h-16 object-contain select-none pointer-events-none rounded-md";

            const nameSpan = document.createElement("span");
            nameSpan.textContent = cake.name;
            nameSpan.className = "text-gray-800 font-medium";

            item.appendChild(radio);
            item.appendChild(img);
            item.appendChild(nameSpan);

            list.appendChild(item);
          });
          enableConfirmButton(selectedCake !== null);
        }

        rightPanel.appendChild(list);

        rightPanel.style.width = "15vw";
        rightPanel.style.minWidth = "132px";

        cakeArea.classList.add("shifted");

        selectedPlate = null;
        decorationsContainer.innerHTML = "";
        updateCakeAreaDisplay();
      }

      function renderSelectDecorations() {
        step = "selectDecorations";
        clearRightPanel();
        showBottomButtons(true);
        btnBackStep.disabled = false;
        enableConfirmButton(true);
        trashButton.style.display = "flex";

        const title = document.createElement("h2");
        title.textContent = "Ch·ªçn ƒë·ªì trang tr√≠";
        title.className =
          "text-xl font-bold p-4 border-b border-gray-300 sticky top-0 bg-white z-10";
        rightPanel.appendChild(title);

        const list = document.createElement("div");
        list.className = "flex flex-col gap-3 p-4 overflow-y-auto no-scrollbar";
        list.style.minHeight = "100%";

        if (decorateInventory.length === 0) {
          const noDecorMsg = document.createElement("p");
          noDecorMsg.textContent = "Kh√¥ng c√≤n ƒë·ªì trang tr√≠ n√†o ƒë·ªÉ ch·ªçn.";
          noDecorMsg.className = "text-center text-gray-600 font-semibold";
          list.appendChild(noDecorMsg);
        } else {
          decorateInventory.forEach((dec) => {
            const btn = document.createElement("button");
            btn.type = "button";
            btn.className =
              "flex items-center gap-3 p-2 rounded-lg cursor-pointer border border-gray-300 hover:border-green-600 transition w-full";

            btn.setAttribute("aria-label", `Th√™m ƒë·ªì trang tr√≠: ${dec.name}`);

            const img = document.createElement("img");
            img.src = dec.img;
            img.alt = dec.alt;
            img.className =
              "w-12 h-12 object-contain select-none pointer-events-none rounded-md";

            const nameSpan = document.createElement("span");
            nameSpan.textContent = dec.name;
            nameSpan.className = "text-gray-800 font-medium";

            btn.appendChild(img);
            btn.appendChild(nameSpan);

            btn.addEventListener("click", () => {
              addDecoration(dec);
            });

            list.appendChild(btn);
          });
        }

        rightPanel.appendChild(list);

        rightPanel.style.width = "15vw";
        rightPanel.style.minWidth = "132px";

        cakeArea.classList.add("shifted");

        updateCakeAreaDisplay();
      }

      function renderSelectPlate() {
        step = "selectPlate";
        clearRightPanel();
        showBottomButtons(true);
        btnBackStep.disabled = false;
        enableConfirmButton(selectedPlate !== null);
        trashButton.style.display = "none";

        const title = document.createElement("h2");
        title.textContent = "Ch·ªçn ƒëƒ©a";
        title.className =
          "text-xl font-bold p-4 border-b border-gray-300 sticky top-0 bg-white z-10";
        rightPanel.appendChild(title);

        const list = document.createElement("div");
        list.className = "flex flex-col gap-3 p-4 overflow-y-auto no-scrollbar";
        list.style.minHeight = "100%";

        if (plateInventory.length === 0) {
          const noPlateMsg = document.createElement("p");
          noPlateMsg.textContent = "Kh√¥ng c√≤n ƒëƒ©a n√†o ƒë·ªÉ ch·ªçn.";
          noPlateMsg.className = "text-center text-gray-600 font-semibold";
          list.appendChild(noPlateMsg);
          enableConfirmButton(false);
          selectedPlate = null;
          updateCakeAreaDisplay();
        } else {
          plateInventory.forEach((plate) => {
            const item = document.createElement("label");
            item.className =
              "flex items-center gap-3 p-2 rounded-lg cursor-pointer border border-gray-300 hover:border-green-600 transition";

            const radio = document.createElement("input");
            radio.type = "radio";
            radio.name = "plate-select";
            radio.value = plate.id;
            radio.className = "w-5 h-5 cursor-pointer";
            radio.checked = selectedPlate && selectedPlate.id === plate.id;
            radio.setAttribute("aria-label", plate.name);

            radio.addEventListener("change", () => {
              selectedPlate = plate;
              enableConfirmButton(true);
              updateCakeAreaDisplay();
            });

            const img = document.createElement("img");
            img.src = plate.img;
            img.alt = plate.alt;
            img.className =
              "w-16 h-16 object-contain select-none pointer-events-none rounded-md";

            const nameSpan = document.createElement("span");
            nameSpan.textContent = plate.name;
            nameSpan.className = "text-gray-800 font-medium";

            item.appendChild(radio);
            item.appendChild(img);
            item.appendChild(nameSpan);

            list.appendChild(item);
          });
          enableConfirmButton(selectedPlate !== null);
        }

        rightPanel.appendChild(list);

        rightPanel.style.width = "15vw";
        rightPanel.style.minWidth = "132px";

        cakeArea.classList.add("shifted");

        updateCakeAreaDisplay();
      }

      function renderDecorations() {
        decorationsContainer.innerHTML = "";
        selectedDecorations.forEach((dec, index) => {
          const decEl = document.createElement("img");
          decEl.src = dec.img;
          decEl.alt = dec.alt;
          decEl.className = "absolute select-none";
          decEl.style.left = dec.x + "px";
          decEl.style.top = dec.y + "px";
          decEl.style.width = dec.scale * 64 + "px";
          decEl.style.height = "auto";
          decEl.style.transformOrigin = "center center";
          decEl.style.userSelect = "none";
          decEl.style.touchAction = "none";
          decEl.setAttribute("data-index", index);
          decEl.setAttribute("aria-label", `ƒê·ªì trang tr√≠: ${dec.name}`);

          if (step === "selectDecorations") {
            decEl.classList.add("cursor-move");
            decEl.addEventListener("pointerdown", onDecorationPointerDown);
          } else {
            decEl.classList.remove("cursor-move");
            decEl.removeEventListener("pointerdown", onDecorationPointerDown);
          }

          decorationsContainer.appendChild(decEl);
        });
      }

      function addDecoration(dec) {
        const x = decorationsContainer.clientWidth / 2 - 32;
        const y = decorationsContainer.clientHeight / 2 - 32;

        selectedDecorations.push({
          ...dec,
          x,
          y,
          scale: 1,
          name: dec.name,
          img: dec.img,
          alt: dec.alt,
        });
        renderDecorations();
      }

      function onDecorationPointerDown(e) {
        e.preventDefault();
        if (step !== "selectDecorations") return;

        const target = e.currentTarget;
        const index = Number(target.getAttribute("data-index"));
        if (isNaN(index)) return;

        dragState.dragging = true;
        dragState.target = target;
        dragState.startX = e.clientX;
        dragState.startY = e.clientY;
        dragState.origX = selectedDecorations[index].x;
        dragState.origY = selectedDecorations[index].y;
        dragState.origScale = selectedDecorations[index].scale;
        dragState.index = index;

        target.setPointerCapture(e.pointerId);

        target.style.transition = "none";

        window.addEventListener("pointermove", onDecorationPointerMove);
        window.addEventListener("pointerup", onDecorationPointerUp);
        window.addEventListener("pointercancel", onDecorationPointerUp);
      }

      function onDecorationPointerMove(e) {
        if (!dragState.dragging) return;
        e.preventDefault();

        const dx = e.clientX - dragState.startX;
        const dy = e.clientY - dragState.startY;

        let newX = dragState.origX + dx;
        let newY = dragState.origY + dy;

        const maxX = decorationsContainer.clientWidth - 32;
        const maxY = decorationsContainer.clientHeight - 32;
        const minX = -32;
        const minY = -32;

        if (newX < minX) newX = minX;
        if (newX > maxX) newX = maxX;
        if (newY < minY) newY = minY;
        if (newY > maxY) newY = maxY;

        selectedDecorations[dragState.index].x = newX;
        selectedDecorations[dragState.index].y = newY;

        let scale = dragState.origScale;
        if (dy < 0) {
          scale = Math.max(0.5, dragState.origScale - -dy / 200);
        } else {
          scale = Math.min(1.5, dragState.origScale + dy / 200);
        }
        selectedDecorations[dragState.index].scale = scale;

        renderDecorations();

        // Check if over trash button
        const trashRect = trashButton.getBoundingClientRect();
        const pointerX = e.clientX;
        const pointerY = e.clientY;
        if (
          pointerX >= trashRect.left &&
          pointerX <= trashRect.right &&
          pointerY >= trashRect.top &&
          pointerY <= trashRect.bottom
        ) {
          trashButton.classList.add("drag-over");
        } else {
          trashButton.classList.remove("drag-over");
        }
      }

      function onDecorationPointerUp(e) {
        if (!dragState.dragging) return;
        e.preventDefault();

        // Check if dropped over trash button
        const trashRect = trashButton.getBoundingClientRect();
        const pointerX = e.clientX;
        const pointerY = e.clientY;
        if (
          pointerX >= trashRect.left &&
          pointerX <= trashRect.right &&
          pointerY >= trashRect.top &&
          pointerY <= trashRect.bottom
        ) {
          // Remove decoration at dragState.index
          if (dragState.index !== null && dragState.index >= 0 && dragState.index < selectedDecorations.length) {
            selectedDecorations.splice(dragState.index, 1);
          }
        }

        dragState.target.style.transition = "";

        dragState.dragging = false;
        dragState.target = null;
        dragState.index = null;

        trashButton.classList.remove("drag-over");

        window.removeEventListener("pointermove", onDecorationPointerMove);
        window.removeEventListener("pointerup", onDecorationPointerUp);
        window.removeEventListener("pointercancel", onDecorationPointerUp);

        renderDecorations();
      }

      function resetAll() {
        step = "idle";
        selectedCake = null;
        selectedDecorations = [];
        selectedPlate = null;
        rightPanel.style.width = "0";
        rightPanel.style.minWidth = "0";
        showBottomButtons(false);
        cakeImg.style.display = "none";
        plateImg.style.display = "none";
        decorationsContainer.innerHTML = "";
        btnConfirmStep.disabled = true;
        cakeArea.classList.remove("shifted");
        btnStart.style.display = "block";
        trashButton.style.display = "none";
      }

      function saveDecoratedCake() {
        const decoratedCake = {
          id: `decorated_${Date.now()}`,
          cake: selectedCake,
          decorations: JSON.parse(JSON.stringify(selectedDecorations)),
          plate: selectedPlate,
        };
        history.push(decoratedCake);

        cakeInventory = cakeInventory.filter((c) => c.id !== selectedCake.id);
        rewardInventory.cake = cakeInventory;

        selectedCake = null;
        selectedDecorations = [];
        selectedPlate = null;

        step = "finished";
        rightPanel.style.width = "0";
        rightPanel.style.minWidth = "0";
        showBottomButtons(false);

        cakeImg.style.display = "block";
        cakeImg.src = decoratedCake.cake.img;
        cakeImg.alt = decoratedCake.cake.alt;

        plateImg.style.display = "block";
        plateImg.src = decoratedCake.plate.img;
        plateImg.alt = decoratedCake.plate.alt;

        selectedDecorations = decoratedCake.decorations;
        renderDecorations();

        btnStart.disabled = false;

        cakeArea.classList.remove("shifted");
        trashButton.style.display = "none";
        autoSave();
      }

      function renderHistory() {
        historyList.innerHTML = "";
        if (history.length === 0) {
          const emptyMsg = document.createElement("p");
          emptyMsg.textContent = "Ch∆∞a c√≥ b√°nh ƒë√£ trang tr√≠ n√†o trong l·ªãch s·ª≠.";
          emptyMsg.className = "text-center text-gray-600";
          historyList.appendChild(emptyMsg);
          return;
        }

        history.forEach((item) => {
          const container = document.createElement("div");
          container.className =
            "flex gap-3 items-center border border-gray-300 rounded-lg p-2";

          const plateWrapper = document.createElement("div");
          plateWrapper.className = "relative w-20 h-20 flex-shrink-0";

          const plateImgEl = document.createElement("img");
          plateImgEl.src = item.plate.img;
          plateImgEl.alt = item.plate.alt;
          plateImgEl.className =
            "absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-20 h-20 object-contain select-none pointer-events-none";
          plateWrapper.appendChild(plateImgEl);

          const cakeImgEl = document.createElement("img");
          cakeImgEl.src = item.cake.img;
          cakeImgEl.alt = item.cake.alt;
          cakeImgEl.className =
            "absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-16 h-16 object-contain select-none pointer-events-none";
          plateWrapper.appendChild(cakeImgEl);

          const decContainer = document.createElement("div");
          decContainer.className =
            "absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-16 h-16 pointer-events-none";
          item.decorations.forEach((dec) => {
            const decEl = document.createElement("img");
            decEl.src = dec.img;
            decEl.alt = dec.alt;
            decEl.className = "absolute select-none";
            decEl.style.left = dec.x * (16 / 56) + "px";
            decEl.style.top = dec.y * (16 / 56) + "px";
            decEl.style.width = dec.scale * (64 * 16 / 56) + "px";
            decEl.style.height = "auto";
            decContainer.appendChild(decEl);
          });
          plateWrapper.appendChild(decContainer);

          container.appendChild(plateWrapper);

          const info = document.createElement("div");
          info.className = "flex flex-col";

          const cakeName = document.createElement("p");
          cakeName.textContent = item.cake.name;
          cakeName.className = "font-semibold text-gray-800";

          const plateName = document.createElement("p");
          plateName.textContent = `ƒêƒ©a: ${item.plate.name}`;
          plateName.className = "text-gray-600 text-sm";

          const decNames = item.decorations.length
            ? item.decorations.map((d) => d.name).join(", ")
            : "Kh√¥ng c√≥ ƒë·ªì trang tr√≠";
          const decText = document.createElement("p");
          decText.textContent = `Trang tr√≠: ${decNames}`;
          decText.className = "text-gray-600 text-sm truncate max-w-xs";

          info.appendChild(cakeName);
          info.appendChild(plateName);
          info.appendChild(decText);

          container.appendChild(info);

          historyList.appendChild(container);
        });
      }

      btnStart.addEventListener("click", () => {
        loadInventories();
        rewardInventory.cake = cakeInventory;
        rewardInventory.plate = plateInventory;
        rewardInventory.decoration = decorateInventory;
        rewardInventory.history = history;

        selectedCake = null;
        selectedDecorations = [];
        selectedPlate = null;
        renderSelectCake();
      });

      btnHistory.addEventListener("click", () => {
        renderHistory();
        historyModal.classList.remove("hidden");
      });

      btnCloseHistory.addEventListener("click", () => {
        historyModal.classList.add("hidden");
      });

      btnBackStep.addEventListener("click", () => {
        if (step === "selectCake") {
          if (cakeInventory.length === 0) {
            rightPanel.style.width = "0";
            rightPanel.style.minWidth = "0";
            showBottomButtons(false);
            cakeArea.classList.remove("shifted");
            step = "idle";
            trashButton.style.display = "none";
          }
        } else if (step === "selectDecorations") {
          renderSelectCake();
          trashButton.style.display = "none";
        } else if (step === "selectPlate") {
          renderSelectDecorations();
          trashButton.style.display = "flex";
        }
      });

      btnConfirmStep.addEventListener("click", () => {
        if (step === "selectCake") {
          if (!selectedCake) return;
          renderSelectDecorations();
          trashButton.style.display = "flex";
        } else if (step === "selectDecorations") {
          renderSelectPlate();
          trashButton.style.display = "none";
        } else if (step === "selectPlate") {
          if (!selectedPlate) return;
          saveDecoratedCake();
        }
      });

      // Initialize data only if not present, then load inventories and reset UI
      initializeDataIfNeeded();
      loadInventories();
      resetAll();
    })();
  </script>
</body>
</html>
